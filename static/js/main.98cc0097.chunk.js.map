{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["guests","id","name","Guest","props","react_default","a","createElement","className","type","defaultValue","placeholder","value","defaultChecked","App","state","App_Guest","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAS,CACb,CACEC,GAAI,IACJC,KAAM,UACR,CACED,GAAI,IACJC,KAAM,UACR,CACED,GAAI,IACJC,KAAM,UACR,CACED,GAAI,IACJC,KAAM,UAIJC,EAAQ,SAACC,GAEb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,aAAa,aAAaC,YAAY,mBACzDN,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASP,KAAK,SAASU,MAAM,UAA1C,YAGJP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aADd,sCAIFJ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBAINF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,sBACxBF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,oBACxBF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWI,gBAAc,IADvC,cAGAR,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,YAAOP,EAAO,GAAGE,MACjBG,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWI,gBAAc,IADvC,cAGAR,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aADd,cAGAJ,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,6BAyBOO,6MAhBbC,MAAQ,CAAEf,OAAQA,2EAGhB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,CACEd,KAAMF,EAAOE,OAFjB,YALYe,aCzEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98cc0097.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/style.css'\n\nconst guests = [\n  {\n    id: '0',\n    name: 'Andrei'},\n  {\n    id: '1',\n    name: 'Dragos'},\n  {\n    id: '2',\n    name: 'Costin'},\n  {\n    id: '3',\n    name: 'Alex'}\n];\n\n\nconst Guest = (props) => {\n\n  return ( \n  <div className=\"App\">\n  <header>\n    <h1>RSVP</h1>\n    <p>A Treehouse App</p>\n    <form>\n      <input type=\"text\" defaultValue=\"Guest name\" placeholder=\"Invite Someone\" />\n      <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n    </form>\n  </header>\n  <div className=\"main\">\n    <div>\n      <h2>Invitees</h2>\n      <label>\n        <input type=\"checkbox\" /> Hide those who haven't responded\n      </label>\n    </div>\n    <table className=\"counter\">\n      <tbody>\n        <tr>\n          <td>Attending:</td>\n          <td>2</td>\n        </tr>\n        <tr>\n          <td>Unconfirmed:</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>Total:</td>\n          <td>3</td>\n        </tr>\n      </tbody>\n    </table>\n    <ul>\n      <li className=\"pending\"><span>Safia</span></li>\n      <li className=\"responded\"><span>Iver</span>\n        <label>\n          <input type=\"checkbox\" defaultChecked /> Confirmed\n        </label>\n        <button>edit</button>\n        <button>remove</button>\n      </li>\n      <li className=\"responded\">\n        <span>{guests[0].name}</span>\n        <label>\n          <input type=\"checkbox\" defaultChecked /> Confirmed\n        </label>\n        <button>edit</button>\n        <button>remove</button>\n      </li>\n      <li>\n        <span>Joel</span>\n        <label>\n          <input type=\"checkbox\" /> Confirmed\n        </label>\n        <button>edit</button>\n        <button>remove</button>\n      </li>\n    </ul>\n  </div>\n</div>);\n}\n\n\nclass App extends Component {\n  state = { guests: guests };\n\n  render() {\n    return (\n      <div>\n        <Guest\n          name={guests.name}\n        />\n        \n       )\n      \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}